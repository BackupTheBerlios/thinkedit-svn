<?php

require_once 'module.base.class.php';
require_once 'query.class.php';

class module_sql extends module_base
{
	
	var $thinkedit; // global thinkedit instance needed
	var $db; // db class (pear) taken from thinkedit
	var $id; // id of this module
	var $type; // type of this module
	var $is_loaded; // is this module loaded ?
	
	
	/**
	* Given an id and a type, will handle any operation related to a module
	*
	*/
	function module_sql($type, $id=false)
	{
		global $thinkedit;
		
		if (!isset($thinkedit))
		{
			die('module_sql::constructor() No global $thinkedit object found. Please create a global $thinkedit so I can work (usually by creating a $thinkedit object before creating new modules objects)');
		}
		$this->thinkedit = &$thinkedit;
		$this->db = &$this->thinkedit->getDb();
		
		$this->type = $type;
		$this->_initConfig();
		$this->_buildElementList();
		
		if ($id) $this->setId($id);
		
	}
	
	
	/**
	* Loads config - private
	*
	*/
	function _initConfig()
	{
		if (isset($this->thinkedit->config['module'][$this->getType()]))
		{
			$this->config = $this->thinkedit->config['module'][$this->getType()];
		}
		else
		{
			die('module::_initConfig() Module called "' . $this->getType() . '" not found in config, check module id spelling in config file / in code');
		}
	}
	
	
	
	/**
	* Sets id after instantiation
	*
	*/
	function setId($id)
	{
		$this->id = $id;
	}
	
	/**
	* Gets last modification date
	*
	*/
	function getLastModified()
	{
		return '01/01/1970';
	}
	
	/**
	* Returns the id of this module
	*
	*/
	function getId()
	{
		if (isset($this->id))
		{
			return $this->id;
		}
		else
		{
			//trigger_error('module_sql::getId() no id defined');
			return false;
		}
	}
	
	
	
	
	function _buildElementList()
	{
		if (!isset($this->elementConfigBuilt))
		{
			foreach ($this->config['element'] as $element_id =>$element)
			{
				$this->element[$element_id] = $this->thinkedit->newElement($this->getType(), $element_id);
			}
			$this->elementConfigBuilt = true;
		}
		
	}
	
	function _assignDataToElement()
	{
		foreach ($this->data as $element_id=>$value)
		{
			if (isset($this->element[$element_id]))
			{
				$this->element[$element_id]->set($value);
			}
		}
	}
	
	
	/**
	* must be called to obtain the content of this module. Can use caching
	*
	* todo: caching
	*/
	function load($usecache=true)
	{
		if ($this->is_loaded)
		{
			return true;
		}
		else
		{
			if ($this->getId())
			{
				/* a good example of overused oo (or not ?) :
				require_once('sql.class.php');
				$sql = new sql($this->thinkedit->getDb());
				$sql->addFrom($this->getTableName());
				$sql->addWhere('id', '=', $this->getId());
				//echo $sql->getSelectQuery();
				$result = $this->db->getAll($sql->getSelectQuery());
				*/
				
				$sql = "select * from	" . $this->getTableName() . " where id='" . $this->getId() . "'";
				
				$result = $this->db->query($sql);
				
				//debug($result);
				
				if (DB::isError($result))
				{
					die('module::load() db error on module load');
				}
				if (count($result) > 0)
				{
					$this->data = $result[0];
					$this->_assignDataToElement();
					$this->is_loaded=true;
					return true;
				}
				else
				{
					trigger_error('module::load() cannot load module, no results found in db');
					return false;
				}
			}
			else
			{
				trigger_error('module::load() cannot load module if no $id given');
				return false;
			}
		}
		
	}
	
	function loadFromArray($array)
	{
		$this->data = $array;
		$this->_assignDataToElement();
		$this->is_loaded=true;
		return true;
		
	}
	
	/**
	* will save the current module to the DB
	*
	*/
	function save()
	{	
		$query = new query();
		$query->addTable($this->getTableName());
		
		foreach ($this->element as $element)
		{
			if ($element->getRaw())
			{
				$query->addValue($element->getName(), $element->getRaw());
			}
		}
		
		// if we have an id defined, we do an update
		
		if ($this->getId())
		{
			
			$query->addWhere('id', '=', $this->getId());
			
			$res = $this->db->query($query->update());
			if ($this->db->isError())
			{
				trigger_error('module_sql::save db error');
				return false;
			}
		}
		else // if we don't have an id, we do an insert, and we set the current id to the autogenerated id
		{
			$res = $this->db->query($query->insert());
			
			if ($this->db->isError())
			{
				trigger_error('module_sql::save db error');
				return false;
			}
			// now we retrieve the last inserted id from the db and assign it to this class's id
			$id = $this->db->insertID();
			$this->setId($id);
		}
		return true;
	}
	
	
	/**
	* Returns the title of this module
	*
	*/
	function getTitle()
	{
		
		if ($this->element['title']->get() )
		{
			return $this->element['title']->get();
		}
		else
		{
			$this->load();
			return $this->element['title']->get();
		}
		
		trigger_error('module::getTitle() cannot get title, no title element found, even after loading this module');
		return false;
	}
	
	
	/**
	* Sets the title of this module
	*
	*/
	function setTitle($title)
	{
		//$this->_buildElementList();
		
		if (isset($this->element['title']))
		{
			if (isset($title))
			{
				return $this->element['title']->set($title);
			}
			else
			{
				return $this->element['title']->set('Untitled');
			}
			
		}
		else
		{
			trigger_error('module::setTitle() cannot set title, no title element found');
			return false;
		}
	}
	
	/**
	* returns help message from config file
	*
	*/
	function getHelp()
	{
		trigger_error('module::getHelp() not yet implemented');
		return false;
	}
	
	/**
	* returns table name used by this module
	*
	*/
	function getTableName()
	{
		// todo : implement custom table type in config or not ?
		return $this->getType();
	}
	
	
	// todo : move to another class for viewing and template management
	function view()
	{
		ob_start();
		include('./template/module.php');
		$content = ob_get_contents();
		ob_end_clean();
		return $content;
		
	}
	
	
}


?>